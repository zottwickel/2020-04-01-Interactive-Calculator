{"version":3,"sources":["components/Screen/Screen.js","components/Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["Screen","screenText","className","Button","text","id","handleClick","onClick","e","App","useState","setScreen","screenSplit","split","length","toString","parseFloat","substring","Math","sqrt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d04d64cb.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Screen.css'\r\n\r\nfunction Screen({screenText}) {\r\n  return (\r\n    <div className='screen'>\r\n      <p className='screen-text'>{screenText}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Screen\r\n","import React from 'react'\r\nimport './Button.css'\r\n\r\nfunction Button({text, id, handleClick}) {\r\n  return (\r\n    <button className='button' id={id} onClick={e => handleClick(text)}>{text}</button>\r\n  )\r\n}\r\n\r\nexport default Button;","import React, {useState} from 'react';\nimport Screen from './components/Screen/Screen'\nimport Button from './components/Button/Button'\nimport './App.css';\n\nfunction App() {\n  const [screenText, setScreen] = useState('0')\n  function handleClick(text) {\n    if (text === '=') {\n      const screenSplit = screenText.split(' ')\n      if (screenSplit.length <= 2) {\n        setScreen('error')\n      } else if (screenSplit.length > 3) {\n        setScreen('error')\n      } else if (screenSplit[1] === '÷') {\n        setScreen((screenSplit[0] / screenSplit[2]).toString())\n      } else if (screenSplit[1] === '×') {\n        setScreen((screenSplit[0] * screenSplit[2]).toString())\n      } else if (screenSplit[1] === '-') {\n        setScreen((parseFloat(screenSplit[0]) - parseFloat(screenSplit[2])).toString())\n      } else if (screenSplit[1] === '+') {\n        setScreen((parseFloat(screenSplit[0]) + parseFloat(screenSplit[2])).toString())\n      } else {\n        setScreen('error')\n      }\n    } else if (screenText === '0' && text !== '⇐') {\n      setScreen(text)\n    } else if (text === '⇐' || text === 'clr') {\n      if (screenText.length === 1 || screenText === 'error' || text === 'clr') {\n        setScreen('0')\n      } else {\n        setScreen(screenText.substring(0, screenText.length - 1))\n      }\n    } else if (text === '÷' || text === '×' || text === '-' || text === '+' || text === 'y²' || text === '1/x' || text === '√') {\n      switch (text) {\n        case '÷':\n          setScreen(screenText + ' ÷ ')\n        break;\n        case '×':\n          setScreen(screenText + ' × ')\n        break;\n        case '-':\n          setScreen(screenText + ' - ')\n        break;\n        case '+':\n          setScreen(screenText + ' + ')\n        break;\n        case 'y²':\n          if (screenText.split(' ').length > 1) {\n            setScreen('error')\n          } else {\n            setScreen((parseFloat(screenText) ** 2).toString())\n          }\n        break;\n        case '√':\n          if (screenText.split(' ').length > 1) {\n            setScreen('error')\n          } else {\n            setScreen(Math.sqrt(parseFloat(screenText)).toString())\n          }\n        break;\n        default:\n          setScreen('error')\n        break;\n      }\n    } else {\n      setScreen(screenText + text)\n    }\n  }\n\n  return (\n    <main className='container'>\n      <Screen screenText={screenText}/>\n      <div className='button-box'>\n        <Button text={'7'} handleClick={handleClick}/>\n        <Button text={'8'} handleClick={handleClick}/>\n        <Button text={'9'} handleClick={handleClick}/>\n        <Button text={'÷'} handleClick={handleClick}/>\n        <Button text={'⇐'} handleClick={handleClick}/>\n      </div>\n      <div className='button-box'>\n        <Button text={'4'} handleClick={handleClick}/>\n        <Button text={'5'} handleClick={handleClick}/>\n        <Button text={'6'} handleClick={handleClick}/>\n        <Button text={'×'} handleClick={handleClick}/>\n        <Button text={'y²'} handleClick={handleClick}/>\n      </div>\n      <div className='button-box'>\n        <Button text={'1'} handleClick={handleClick}/>\n        <Button text={'2'} handleClick={handleClick}/>\n        <Button text={'3'} handleClick={handleClick}/>\n        <Button text={'-'} handleClick={handleClick}/>\n        <Button text={'√'} handleClick={handleClick}/>\n      </div>\n      <div className='button-box'>\n        <Button text={'0'} handleClick={handleClick}/>\n        <Button text={'.'} handleClick={handleClick}/>\n        <Button text={'='} id='equals' handleClick={handleClick}/>\n        <Button text={'+'} handleClick={handleClick}/>\n        <Button text={'clr'} id='clear' handleClick={handleClick}/>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}